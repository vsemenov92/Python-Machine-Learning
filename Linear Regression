#Import Libraries

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline

#Get Data

customers = pd.read_csv('Ecommerce Customers')
customers.head()
customers.info()
customers.describe()

#Seaborn
sns.set_palette('GnBu_d')
sns.set_style('whitegrid')

sns.jointplot(x='Time on Website', y='Yearly Amount Spent', data=customers)

sns.jointplot(x='Time on App',y='Yearly Amount Spent',data=customers)

sns.jointplot(x='Time on App',y='Length of Membership', data=customers, kind='hex')

g = sns.PairGrid(customers)
g.map_diag(plt.hist)
g.map_offdiag(plt.scatter)

sns.lmplot(x='Length of Membership', y='Yearly Amount Spent', data=customers)

#Split into train and test data
X = customers[['Avg. Session Length', 'Time on App',
       'Time on Website', 'Length of Membership']]
y = customers['Yearly Amount Spent']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101 )

#Train the model
from sklearn.linear_model import LinearRegression

lm = LinearRegression()

lm.fit(X_train, y_train)

print(lm.coef_)

#Predict Test Data
predictions = lm.predict(X_test)

sns.scatterplot(y_test, predictions)

#Evaluate the model
from sklearn import metrics

print('MAE:', metrics.mean_absolute_error(y_test,predictions))
print('MSE:', metrics.mean_squared_error(y_test, predictions))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))

#Residuals
sns.distplot((y_test-predictions),bins=50)

coefficients = pd.DataFrame(lm.coef_, X.columns)
coefficients.columns = ['coefficients']
coefficients
