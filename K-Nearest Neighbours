#Import Libraries
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline

#Get the Data
df = pd.read_csv('KNN_Project_Data')

#Explore through Seaborn
sns.pairplot(df, hue='TARGET CLASS')

#Standardize the Variables
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

scaler.fit(df.drop('TARGET CLASS', axis=1))

scaled_features = scaler.transform(df.drop('TARGET CLASS', axis=1))

df_feat = pd.DataFrame(scaled_features, columns=df.columns[:-1])
df_feat.head()

#Split the Data
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(scaled_features, df['TARGET CLASS'],test_size=.3)

#Using KNN
from sklearn.neighbors import KNeighborsClassifier

KNN = KNeighborsClassifier(n_neighbors=1)

KNN.fit(X_train, y_train)

#Predictions and Evaluation
pred = KNN.predict(X_test)

from sklearn.metrics import confusion_matrix, classification_report

confusion_matrix(y_test, pred)

print(classification_report(y_test, pred))

#Choosing the K value
error_rate = []

for i in range(1,40):
    KNN = KNeighborsClassifier(n_neighbors=i)
    KNN.fit(X_train, y_train)
    pred_i = KNN.predict(X_test)
    error_rate.append(np.mean(pred_i != y_test))
    
plt.figure(figsize=(10,6))
plt.plot(range(1,40),error_rate,color='blue',linestyle='dashed', marker='o',
        markerfacecolor='red',markersize=10)
plt.title('Error Rate vs. K Value')
plt.xlabel('K')
plt.ylabel('Error Rate')

#Retrain with New K Value
KNN = KNeighborsClassifier(n_neighbors=22)
KNN.fit(X_train, y_train)
predictions = KNN.predict(X_test)

confusion_matrix(y_test, predictions)

print(classification_report(y_test, predictions))

