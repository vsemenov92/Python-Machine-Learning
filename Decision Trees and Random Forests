#Import Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline

#Get the Data
loans = pd.read_csv('loan_data.csv')

#Explore Through Seaborn
plt.figure(figsize=(10,6))
loans[loans['credit.policy']==1]['fico'].hist(alpha=0.5, color='blue',
                                             bins=30, label='credit.policy=1')
loans[loans['credit.policy']==0]['fico'].hist(alpha=0.5, color='red',
                                             bins=30, label='credit.policy=0')
plt.legend()
plt.xlabel('FICO')

plt.figure(figsize=(10,6))
loans[loans['not.fully.paid']==1]['fico'].hist(alpha=0.5,color='blue',
                                              bins=30,label='not.fully.paid=1')
loans[loans['not.fully.paid']==0]['fico'].hist(alpha=0.5 , color='red',
                                             bins=30, label='not.fully.paid column=0')
plt.legend()
plt.xlabel('FICO')

plt.figure(figsize=(10,6))
sns.countplot(data=loans, x='purpose',
              hue='not.fully.paid')
              
sns.jointplot(data=loans, x='fico', y='int.rate', color='purple')

plt.figure(figsize=(11,7))
sns.lmplot(data=loans, y='int.rate', x='fico', hue='credit.policy', col='not.fully.paid')

#Setting up the Data
cat_feats = ['purpose']

final_data = pd.get_dummies(loans, columns=cat_feats, drop_first=True)

#Split the Data
from sklearn.model_selection import train_test_split

X = final_data.drop('not.fully.paid', axis=1)
y = final_data['not.fully.paid']
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3, random_state=101)

#Training the Decision Tree
from sklearn.tree import DecisionTreeClassifier

dtree = DecisionTreeClassifier()

dtree.fit(X_train, y_train)

#Predictions and Evaluations of Decision Tree
predictions = dtree.predict(X_test)

from sklearn.metrics import confusion_matrix, classification_report

print(classification_report(y_test, predictions))

print(confusion_matrix(y_test, predictions))

#Training the Random Forest Model
from sklearn.ensemble import RandomForestClassifier

rfc = RandomForestClassifier()

rfc.fit(X_train, y_train)

#Predictions and Evaluations of Random Forest
rfc_pred = rfc.predict(X_test)

print(classification_report(y_test, rfc_pred))

print(confusion_matrix(y_test, rfc_pred))

